apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2023-01-16T12:43:36Z"
  generation: 1
  labels:
    app: deno-webserver
  name: deno-webserver
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: deno-webserver
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: deno-webserver
    spec:
      containers:
      - image: {{ .Values.ServeurWeb.image.repository}}:{{ .Values.ServeurWeb.image.tag}}
        imagePullPolicy: {{ .Values.ServeurWeb.image.pullPolicy}}
        name: deno-webserver
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - mountPath: /srv/app/pvc
            name: {{ .Values.PVC.volumeName}}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: {{ .Values.PVC.volumeName}}
          persistentVolumeClaim:
              claimName: {{ .Values.PVC.volumeName}}
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2023-01-16T12:43:42Z"
    lastUpdateTime: "2023-01-16T12:43:42Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2023-01-16T12:43:36Z"
    lastUpdateTime: "2023-01-16T12:43:42Z"
    message: ReplicaSet "deno-webserver-6d6d685b45" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

---

apiVersion: v1
kind: PersistentVolume
metadata:
    name: {{ .Values.PV.name}}
spec:
    accessModes:
        - ReadWriteOnce
    persistentVolumeReclaimPolicy: {{ .Values.PV.persistentVolumeReclaimPolicy}}
    storageClassName: standard
    capacity:
        storage: {{ .Values.PV.size}}
    hostPath:
        path: {{ .Values.PV.path}}

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
    name: {{ .Values.PVC.name}}
    namespace: default
spec:
    accessModes:
        - ReadWriteOnce
    resources:
        requests:
            storage: {{ .Values.PVC.size}}

---
apiVersion: v1
kind: Service
metadata:
  name: {{.Values.ServeurWeb.service.name}}
spec:
  type: {{.Values.ServeurWeb.service.type}}
  ports:
    - port: {{.Values.ServeurWeb.service.port}}
  selector:
    app: {{.Values.ServeurWeb.service.name}}

    